global !p
def math():
    return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
    return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
    [x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
    return x != '0' and x != '0'

endglobal

snippet temp "Basic template" b
\documentclass[working, oneside]{inputs/tuftebook}
\input{inputs/preamble-gilles.tex}
\usepackage{pdfpages}

\usepackage{lipsum}
\usepackage{parskip}
\usepackage{titletoc}

\usepackage{cmbright}
\usepackage{bm}

\begin{document}
\pagecolor{pg_color!60!black}
\let\cleardoublepage\clearpage
\thispagestyle{fancy}
\color{new_red}\chapter{Teoretiske Ã˜velser $1}
$0

\end{document}
endsnippet

### Slides snippets ###

snippet stemplate "Slide Template" b
\input{slides_preamble.tex}
\title{$1}
\begin{document}
	\begin{frame}
		\titlepage
	\end{frame}
	\begin{frame}
		\frametitle{$0}
	\end{frame}
\end{document}
endsnippet
snippet frame "frame snippet" b
\begin{frame}
	\frametitle{$1}
	$0
\end{frame}
endsnippet

snippet pic "graphics" b
\includegraphics[width=\textwidth]{Billeder/$1}
endsnippet

snippet column "column" b
\begin{columns}
	\column{0.5\textwidth}
	$1
	\column{0.5\textwidth}
	$0
\end{columns}
endsnippet
#############

snippet exer "exercise" ib
\begin{exercise}[$1]
$0
\end{exercise}
endsnippet

snippet solu "solution" ib
\begin{solution}
$0
\end{solution}
endsnippet

snippet sube "subexercise" ib
\begin{subexercise}{$1}
$0
\end{subexercise}
endsnippet

global !p
# construct relative path to home/albert/Documents/Latx/Preambles
def construct_relative_path():
	import os
	import vim
	import re
	# get current file path
	current_file_path = vim.eval('expand("%:p:h")')
	# get home path
	home_path = vim.eval('expand("~")')
	# get path to Preambles
	preambles_path = os.path.join(home_path, 'Documents', 'Preambles')
	# construct relative path
	relative_path = os.path.relpath(preambles_path, current_file_path)
	# replace backslashes with forward slashes
	relative_path = re.sub(r'\\', '/', relative_path)
	return relative_path

endglobal
# snippet that imports preamble, colors, theorem_styles using relative path
snippet import "import preamble" b
\documentclass[working, oneside]{`!p snip.rv = construct_relative_path()`/tuftebook}
\input{`!p snip.rv = construct_relative_path()`/colors}
\input{`!p snip.rv = construct_relative_path()`/preamble}
\input{`!p snip.rv = construct_relative_path()`/theorem_styles}

\begin{document}
\let\cleardoublepage\clearpage
\thispagestyle{fancy}
\chapter{$1}

\end{document}
endsnippet

global !p

def create_matrix(snip):

        matrix_str = (snip.buffer[snip.line].split('mat')[0]+'matrix').strip()

        rows = 'x'.join(snip.buffer[snip.line].split("x", 2)[:-1])
        cols = 'x'.join(snip.buffer[snip.line].split("x", 2)[-1:])

        int_val = lambda string: int(''.join(s for s in string if s.isdigit()))

        rows = int_val(rows)
        cols = int_val(cols)

        offset = cols + 1
        old_spacing = snip.buffer[snip.line][:snip.buffer[snip.line].rfind('\t') + 1]

        snip.buffer[snip.line] = ''

        final_str = old_spacing + "\\begin{"+matrix_str+"}\n"

        for i in range(rows):
                final_str += old_spacing + '\t'
                final_str += " & ".join(['$' + str(i * cols + j + offset) for j in range(cols)])

                final_str += " \\\\\\\n"

        final_str += old_spacing + "\\end{"+matrix_str+"}\n$0"

        snip.expand_anon(final_str)

endglobal

pre_expand "create_matrix(snip)"
context "math()"
snippet "(small|[bBpvV])?mat(rix)?_(\d+)x_(\d+)" "Generate (small|[bBpvV])?matrix of *rows* by *columns*" wr
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
	$0
\\end{$1}
endsnippet

context "math()"
snippet aa "alpha" iA
\alpha
endsnippet

context "math()"
snippet eta "alpha" iA
\eta 
endsnippet

context "math()"
snippet Tr "alpha" iA
\text{Tr}\left[$1\right]$0
endsnippet

context "math()"
snippet tau "tau" iA
\tau
endsnippet

context "math()"
snippet xri "alpha" iA
\xrightarrow{$0}
endsnippet

context "math()"
snippet con "alpha" iA
\cong
endsnippet

context "math()"
snippet deg "degrees" iA
^{\circ}
endsnippet

context "math()"
snippet vec "alpha" iA
\vec{$1}$0
endsnippet

context "math()"
snippet dag "alpha" iA
\dagger
endsnippet

context "math()"
snippet gg "gamma" iA
\gamma
endsnippet

context "math()"
snippet CC "beta" iA
\mathbb{C}
endsnippet

context "math()"
snippet bb "beta" iA
\beta
endsnippet

# isotoper
# snippet iss "isotoper" iA
# $^{$1}$$0
# endsnippet

context "math()"
snippet qq "beta" iA
\quad
endsnippet

context "math()"
snippet mu "beta" iA
\mu 
endsnippet


snippet itt "italic" i
\textit{$1}$0
endsnippet

context "math()"
snippet del "beta" iA
\delta
endsnippet

context "math()"
snippet til "tilde over letter" iA
\widetilde{$1}$0
endsnippet

snippet ittt "item[(x)]" iA
\item[($1)]$0
endsnippet

context "math()"
snippet dd "diff" iA
\partial
endsnippet

context "math()"
snippet a++ "diff" iA
\hat{a}_+
endsnippet

context "math()"
snippet a-- "diff" iA
\hat{a}_-
endsnippet

context "math()"
snippet +++ "diff" iA
\pm
endsnippet

context "math()"
snippet a+- "diff" iA
\hat{a}_{\pm}
endsnippet

context "math()"
snippet ss "diff" iA
\sigma
endsnippet

context "math()"
snippet chi "diff" iA
\chi
endsnippet

context "math()"
snippet eps "epsilon" iA
\epsilon
endsnippet

context "math()"
snippet SS "frame" iA
\mathcal{$1}$0
endsnippet

# context "math()"
# snippet dot "frame" iA
# \dot{$1}$0
# endsnippet

context "math()"
snippet doot "frame" iA
\ddot{$1}$0
endsnippet

context "math()"
snippet XX "frame" iA
\Xi
endsnippet

context "math()"
snippet LL "frame" iA
\Lambda
endsnippet

context "math()"
snippet bf "epsilon" iA
\mathbf{$1}$0
endsnippet

context "math()"
snippet thh "diff" iA
\theta 
endsnippet

context "math()"
snippet ome "omega" iA
\omega
endsnippet

context "math()"
snippet ll "omega" iA
\lambda
endsnippet

context "math()"
snippet BB "omega" iA
\mathbb{$1}$0
endsnippet

# context "math()"
# snippet det "omega" iA
# \det \left($1\right)$0 
# endsnippet

context "math()"
snippet PP "omega" iA
\Psi
endsnippet

context "math()"
snippet Phi "omega" iA
\Phi
endsnippet

priority 100
snippet ... "ldots" iA
\ldots
endsnippet

snippet bff "bold text" iA
\textbf{$0}
endsnippet

snippet TT "bold text" iA
\texttt{$1}$0
endsnippet

snippet table "Table environment" b
 \begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet code "code environment" b
\begin{lstlisting}
$0
\end{lstlisting}
endsnippet

snippet pac "Package" b
\usepackage[${1:options}]{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies
endsnippet

snippet =< "implied by" Ai
\impliedby
endsnippet

context "math()"
snippet iff "iff" Ai
\iff
endsnippet

context "math()"
snippet II "iff" Ai
\mathbb{I}
endsnippet

context "math()"
snippet not "iff" Ai
\not{$1}$0
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
${1:${VISUAL}}
.\] $0
endsnippet

snippet ali "Align" bA
\begin{align*}
	${1:${VISUAL}}
.\end{align*}$0
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet

context "math()"
snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet


snippet sympy "sympyblock " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '').replace('^', '**').replace('{', '(').replace('}', ')') + ')')
`
endsnippet

priority 1000
snippet math "mathematicablock" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "math" wr
`!p
import subprocess
code = match.group(1)
code = 'ToString[' + code + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

snippet == "equals" iA
&= $1 \\\\
endsnippet

snippet != "equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

# snippet bmat "bmat" iA
# \begin{bmatrix} $1 \end{bmatrix} $0
# endsnippet

context "math()"
snippet () "left( right)" iA
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet vv "left| right>" iA
\left| ${1:${VISUAL}} \right> $0
endsnippet

snippet VV "left< right|" iA
\left< ${1:${VISUAL}} \right| $0
endsnippet

snippet lr( "left( right)" i
\left( ${1:${VISUAL}} \right) $0
endsnippet

snippet lr| "left| right|" i
\left| ${1:${VISUAL}} \right| $0
endsnippet

snippet lr{ "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lrb "left\{ right\}" i
\left\\{ ${1:${VISUAL}} \right\\} $0
endsnippet

snippet lr[ "left[ right]" i
\left[ ${1:${VISUAL}} \right] $0
endsnippet

snippet lra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right>$0
endsnippet


context "math()"
snippet ket "leftangle rightangle" iA
\left|${1:${VISUAL}} \right>$0
endsnippet

context "math()"
snippet bra "leftangle rightangle" iA
\left<${1:${VISUAL}} \right|$0
endsnippet

context "math()"
snippet conj "conjugate" iA
\overline{$1}$0
endsnippet

# snippet sum "sum" w
# \sum_{i=${1:1}}^{${2:\infty}} ${3:a_i z^i}
# endsnippet

context "math()"
snippet sum "sum" iA
\sum_k
endsnippet

snippet taylor "taylor" w
\sum_{${1:k}=${2:0}}^{${3:\infty}} ${4:c_$1} (x-a)^$1 $0
endsnippet

snippet lim "limit" w
\lim_{${1:n} \to ${2:\infty}} 
endsnippet

snippet limsup "limsup" w
\limsup_{${1:n} \to ${2:\infty}} 
endsnippet

snippet prod "product" w
\prod_{${1:n=${2:1}}}^{${3:\infty}} ${4:${VISUAL}} $0
endsnippet

snippet part "d/dx" w
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet rho "rho" iA
\rho 
endsnippet

context "math()"
snippet circ "rho" iA
\circ
endsnippet

context "math()"
snippet ism "rho" iA
\isomap
endsnippet

context "math()"
snippet phi "phi" iA
\phi
endsnippet

context "math()"
snippet chi "chi" iA
\chi 
endsnippet

context "math()"
snippet td "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet rd "to the ... power" iA
^{($1)}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty
endsnippet

snippet rij "mrij" i
(${1:x}_${2:n})_{${3:$2}\\in${4:\\N}}$0
endsnippet

snippet <= "leq" iA
\le 
endsnippet

snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet

context "math()"
snippet xnn "xn" iA
x_{n}
endsnippet

context "math()"
snippet ynn "yn" iA
y_{n}
endsnippet


context "math()"
snippet xii "xi" iA
x_{i}
endsnippet

context "math()"
snippet yii "yi" iA
y_{i}
endsnippet

context "math()"
snippet xjj "xj" iA
x_{j}
endsnippet

context "math()"
snippet yjj "yj" iA
y_{j}
endsnippet

context "math()"
snippet xp1 "x" iA
x_{n+1}
endsnippet

context "math()"
snippet xmm "x" iA
x_{m}
endsnippet

snippet R0+ "R0+" iA
\\R_0^+
endsnippet

snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet mcal "mathcal" iA
\mathcal{$1}$0
endsnippet

snippet lll "l" iA
\ell
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet norm "norm" iA
\|$1\|$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet

priority 300
context "math()"
snippet dint "integral" wA
\int_{${1:-\infty}}^{${2:\infty}} ${3:${VISUAL}} $0
endsnippet

priority 200
context "math()"
snippet '(?<!\\)(arcsin|arccos|arctan|arccot|arccsc|arcsec|pi|zeta|int)' "ln" rwA
\\`!p snip.rv = match.group(1)`
endsnippet


priority 100
context "math()"
snippet -> "to" iA
\to 
endsnippet

context "math()"
snippet bcc "rcurse" iA
\brcurs
endsnippet

context "math()"
snippet hcc "rcurse" iA
\hrcurs 
endsnippet

context "math()"
snippet rcc "rcurse" iA
\rcurs
endsnippet

priority 200
context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet invs "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus
endsnippet

snippet >> ">>" iA
\gg
endsnippet

snippet << "<<" iA
\ll
endsnippet


snippet ~~ "~" iA
\sim 
endsnippet

context "math()"
snippet set "set" wA
\\{$1\\} $0
endsnippet

context "math()"
snippet || "mid" iA
 \mid 
endsnippet

context "math()"
snippet notin "not in " iA
\not\in 
endsnippet

context "math()"
snippet inn "in " iA
\in 
endsnippet

context "math()"
snippet NN "n" iA
\N
endsnippet

context "math()"
snippet Nn "cap" iA
\cap 
endsnippet

context "math()"
snippet UU "cup" iA
\cup 
endsnippet

context "math()"
snippet uuu "bigcup" iA
\bigcup_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet nnn "bigcap" iA
\bigcap_{${1:i \in ${2: I}}} $0
endsnippet

context "math()"
snippet OO "emptyset" iA
\Omega
endsnippet

context "math()"
snippet RR "real" iA
\mathbb{R}
endsnippet

context "math()"
snippet ZZ "real" iA
\mathbb{Z}
endsnippet

context "math()"
snippet NN "natural" iA
\mathbb{N}
endsnippet

snippet \mathbb{R}n "real" iA
\mathbb{R}^{n}
endsnippet

snippet QQ "Q" iA
\emptyset
endsnippet

snippet GL "Q" iA
\text{GL}\left(n, \mathbb{R}\right)
endsnippet

snippet <! "normal" iA
\triangleleft 
endsnippet

snippet <> "hokje" iA
\diamond 
endsnippet


context "math()"
snippet '(?<!i)sts' "text subscript" irA
_\text{$1} $0
endsnippet

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1
\end{cases}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto ($5) = $0
.\end{align*}
endsnippet

snippet cvec "column vector" iA
\begin{pmatrix} ${1:x}_${2:1}\\\\ \vdots\\\\ $1_${2:n} \end{pmatrix}
endsnippet

priority 10
context "math()"
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
context "math()"
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
context "math()"
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet letw "let omega" iA
Let $\Omega \subset \C$ be open.
endsnippet

context "math()"
snippet sub "subset" iA
\subset
endsnippet

context "math()"
snippet HH "H" iA
\mathbb{H}
endsnippet

snippet DD "D" iA
\Delta
endsnippet

# vim:ft=snippets
